[{"filePath":"d:\\passion\\waari-live\\frontend\\src\\jsx\\layouts\\AIAssistant.jsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'searchTrips' is defined but never used.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'generateTripResponse' is defined but never used.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'generateSuggestedQuestions' is defined but never used.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":29},{"ruleId":"react/prop-types","severity":2,"message":"'isOpen' is missing in props validation","line":12,"column":24,"nodeType":"Property","messageId":"missingPropType","endLine":12,"endColumn":30},{"ruleId":"react/prop-types","severity":2,"message":"'onClose' is missing in props validation","line":12,"column":32,"nodeType":"Property","messageId":"missingPropType","endLine":12,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'setUserPreferences' is assigned a value but never used.","line":37,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'extractPreferences' is assigned a value but never used.","line":96,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'getFollowUpQuestions' is assigned a value but never used.","line":168,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":168,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'handleGeneralQuestion' is assigned a value but never used.","line":292,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":292,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is assigned a value but never used.","line":464,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":464,"endColumn":20}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./AIAssistant.scss\";\nimport WaariAIService from \"../../services/WaariAIService\";\nimport ERPContextManager from \"../../services/ERPContextManager\";\nimport {\n  searchTrips,\n  generateTripResponse,\n  generateSuggestedQuestions,\n} from \"../../services/TripService\";\n\nconst AIAssistant = ({ isOpen, onClose }) => {\n  const reduxState = useSelector((state) => state);\n  // Popular questions pool for suggestions\n  const popularQuestions = [\n    \"What's the duration of tours?\",\n    \"Tell me about pricing options\",\n    \"What activities are included?\",\n    \"How do I book a tour?\",\n    \"Where are your destinations?\",\n    \"Tell me about accommodation\",\n    \"How does transportation work?\",\n    \"What are payment options?\",\n    \"Is it safe to travel with you?\",\n    \"Tell me about group sizes\",\n    \"When are tours available?\",\n    \"What reviews do you have?\",\n  ];\n\n  // Helper function to get random popular questions for suggestions\n  const getRandomPopularQuestions = (count = 4) => {\n    const shuffled = [...popularQuestions].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, count);\n  };\n\n  // User preference state for smart context\n  const [userPreferences, setUserPreferences] = useState({\n    budget: null,\n    duration: null,\n    activityType: null,\n    groupType: null,\n    destination: null,\n  });\n\n  // Get initial greeting based on current module\n  const getInitialGreeting = () => {\n    const module = ERPContextManager.detectModule();\n    const greetings = {\n      PRESALES:\n        \"Hello! 👋 I'm Waari AI. I can help you with presales management - search tours, create enquiries, assign them to team members, and track follow-ups. What would you like to do? 🚀\",\n      BOOKINGS:\n        \"Hello! 👋 I'm Waari AI. I can help manage your bookings - view details, manage guests, arrange accommodations, and handle all booking operations. How can I help? 📅\",\n      BILLING:\n        \"Hello! 👋 I'm Waari AI. I can help with billing - generate invoices, calculate costs, apply discounts, and track payments. What do you need? 💰\",\n      PAYMENTS:\n        \"Hello! 👋 I'm Waari AI. I can help process payments - collect payments, generate receipts, handle failed payments. What would you like? 💳\",\n      GUESTS:\n        \"Hello! 👋 I'm Waari AI. I can help manage guests - add new guests, manage documents, track requirements. How can I assist? 👥\",\n      REPORTING:\n        \"Hello! 👋 I'm Waari AI. I can help with reports - generate sales analysis, commission tracking, profit analysis. What report do you need? 📊\",\n      TEAM: \"Hello! 👋 I'm Waari AI. I can help manage your team - add users, manage roles, set permissions, track performance. How can I help? 👤\",\n      TOURS:\n        \"Hello! 👋 I'm Waari AI. I can help with tour management - search tours, filter, create new tours, check availability. What do you need? 🌍\",\n      DASHBOARD:\n        \"Hello! 👋 I'm Waari AI, your personal ERP assistant. I can help you navigate your system across all modules. What can I do for you today? 🚀\",\n      GENERAL:\n        \"Hello! 👋 I'm Waari AI, your complete ERP assistant. I can help you manage tours, bookings, billing, guests, reports, and more. How can I assist? 🎯\",\n    };\n\n    return greetings[module] || greetings.GENERAL;\n  };\n\n  const [messages, setMessages] = useState([\n    {\n      id: 1,\n      text: getInitialGreeting(),\n      sender: \"bot\",\n      timestamp: new Date(),\n      suggestions: getRandomPopularQuestions(4),\n    },\n  ]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Auto scroll to bottom\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Extract user preferences from query\n  const extractPreferences = (query) => {\n    const lowerQuery = query.toLowerCase();\n    const newPrefs = { ...userPreferences };\n\n    // Budget detection\n    const budgetPatterns = [\n      { pattern: /under\\s*₹?(\\d+[kK]?)/i, budget: \"budget\" },\n      { pattern: /(\\d+[kK]?)\\s*to\\s*(\\d+[kK]?)/i, budget: \"mid-range\" },\n      { pattern: /(affordable|cheap|budget|economical)/i, budget: \"budget\" },\n      { pattern: /(premium|luxury|expensive|high-end)/i, budget: \"premium\" },\n    ];\n    budgetPatterns.forEach((bp) => {\n      if (bp.pattern.test(query)) newPrefs.budget = bp.budget;\n    });\n\n    // Duration detection\n    if (/([2-3]\\s*(day|days)|(weekend|short))/i.test(query))\n      newPrefs.duration = \"2-3 days\";\n    if (/([4-5]\\s*(day|days))/i.test(query)) newPrefs.duration = \"4-5 days\";\n    if (/([6-8]\\s*(day|days)|week)/i.test(query))\n      newPrefs.duration = \"6-8 days\";\n    if (/([10-14]\\s*(day|days)|long)/i.test(query))\n      newPrefs.duration = \"10+ days\";\n\n    // Activity type detection\n    const activityKeywords = [\n      {\n        keywords: [\"adventure\", \"trek\", \"hike\", \"extreme\", \"adrenaline\"],\n        type: \"Adventure\",\n      },\n      { keywords: [\"beach\", \"relax\", \"chill\", \"resort\"], type: \"Beach\" },\n      {\n        keywords: [\"culture\", \"heritage\", \"historical\", \"temple\", \"monument\"],\n        type: \"Cultural\",\n      },\n      {\n        keywords: [\"mountain\", \"himalayas\", \"peak\", \"nature\"],\n        type: \"Mountain\",\n      },\n    ];\n    activityKeywords.forEach((ak) => {\n      if (ak.keywords.some((kw) => lowerQuery.includes(kw))) {\n        newPrefs.activityType = ak.type;\n      }\n    });\n\n    // Group type detection\n    if (/(couple|honeymoon|romantic)/i.test(query))\n      newPrefs.groupType = \"Couple\";\n    if (/(family|kids|children)/i.test(query)) newPrefs.groupType = \"Family\";\n    if (/(solo|alone|single)/i.test(query)) newPrefs.groupType = \"Solo\";\n    if (/(friends|group)/i.test(query)) newPrefs.groupType = \"Group\";\n\n    // Destination detection (you can expand this)\n    const destinations = [\n      \"goa\",\n      \"kerala\",\n      \"delhi\",\n      \"mumbai\",\n      \"rajasthan\",\n      \"himalayas\",\n      \"bangalore\",\n    ];\n    destinations.forEach((dest) => {\n      if (lowerQuery.includes(dest))\n        newPrefs.destination = dest.charAt(0).toUpperCase() + dest.slice(1);\n    });\n\n    return newPrefs;\n  };\n\n  // Get strategic follow-up questions based on missing preferences\n  const getFollowUpQuestions = () => {\n    const questions = [];\n\n    if (!userPreferences.budget) {\n      questions.push({\n        text: \"What's your budget range?\",\n        options: [\n          \"💰 Budget (Under ₹25k)\",\n          \"💳 Mid-range (₹25k-50k)\",\n          \"💎 Premium (₹50k+)\",\n        ],\n      });\n    }\n\n    if (!userPreferences.duration) {\n      questions.push({\n        text: \"How many days do you have?\",\n        options: [\"⏰ 2-3 days\", \"📅 4-5 days\", \"🎒 6-8 days\", \"🏖️ 10+ days\"],\n      });\n    }\n\n    if (!userPreferences.activityType) {\n      questions.push({\n        text: \"What type of experience?\",\n        options: [\"🏖️ Beach\", \"🏔️ Mountain\", \"🎪 Culture\", \"⛰️ Adventure\"],\n      });\n    }\n\n    return questions;\n  };\n\n  // Get smart suggestions based on preferences\n  const getSmartSuggestions = () => {\n    const suggestions = [];\n    const prefs = userPreferences;\n\n    if (prefs.destination) {\n      suggestions.push(\n        `Show me ${prefs.activityType || \"adventure\"} tours to ${\n          prefs.destination\n        }`\n      );\n    }\n\n    if (prefs.duration && prefs.budget) {\n      suggestions.push(`${prefs.duration} trip in ${prefs.budget} budget`);\n    }\n\n    if (prefs.groupType) {\n      suggestions.push(`Perfect for ${prefs.groupType} travelers`);\n    }\n\n    if (suggestions.length === 0) {\n      return getRandomPopularQuestions(4);\n    }\n\n    // Fill remaining with popular questions\n    while (suggestions.length < 4) {\n      const popular = getRandomPopularQuestions(1);\n      if (!suggestions.includes(popular[0])) {\n        suggestions.push(popular[0]);\n      }\n    }\n\n    return suggestions.slice(0, 4);\n  };\n\n  const handleSendMessage = async (e, messageToSend = null) => {\n    if (e && e.preventDefault) e.preventDefault();\n\n    const queryToProcess = messageToSend || inputValue;\n    if (!queryToProcess.trim()) return;\n\n    // Add user message\n    const userMessage = {\n      id: messages.length + 1,\n      text: queryToProcess,\n      sender: \"user\",\n      timestamp: new Date(),\n    };\n\n    const historyForApi = [...messages, userMessage];\n\n    setMessages((prev) => [...prev, userMessage]);\n    setInputValue(\"\");\n    setIsLoading(true);\n\n    try {\n      console.log(\"🚀 Processing query with ERP context\");\n      const response = await WaariAIService.processQueryWithContext(\n        queryToProcess,\n        reduxState,\n        historyForApi\n      );\n\n      console.log(\"✅ AI Response:\", response);\n\n      const botMessage = {\n        id: messages.length + 2,\n        text: response.text,\n        sender: \"bot\",\n        timestamp: new Date(),\n        suggestions: response.suggestions || getSmartSuggestions(),\n        filters: response.filters || undefined,\n        action: response.action,\n        actionable: response.actionable,\n        context: response.context,\n      };\n      setMessages((prev) => [...prev, botMessage]);\n    } catch (error) {\n      console.error(\"❌ Error processing message:\", error);\n      const errorMessage = {\n        id: messages.length + 2,\n        text: \"I encountered an error processing your request. Please try again later! 😅\",\n        sender: \"bot\",\n        timestamp: new Date(),\n        suggestions: getRandomPopularQuestions(4),\n      };\n      setMessages((prev) => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGeneralQuestion = async (query) => {\n    const lowerQuery = query.toLowerCase();\n\n    // Comprehensive predefined responses for common questions\n    const responses = {\n      greeting: {\n        keywords: [\"hello\", \"hi\", \"hey\", \"greetings\", \"what's up\", \"howdy\"],\n        response:\n          \"Hi there! 👋 I'm your AI Assistant at Waari! I'm here to help you find the perfect trip! You can ask me about tours, destinations, travel packages, or anything else. What are you looking for? 🌍\",\n      },\n      help: {\n        keywords: [\n          \"help\",\n          \"what can you do\",\n          \"assist\",\n          \"capabilities\",\n          \"features\",\n          \"how can you help\",\n        ],\n        response:\n          \"I can help you with:\\n• Finding group tours 🚌\\n• Discovering tailor-made tours ✨\\n• Searching for specific destinations 🗺️\\n• Learning about travel dates and durations 📅\\n• Information about pricing and packages 💰\\n• Booking process and procedures 📋\\n• Questions about facilities and amenities 🏨\\n• Travel tips and destination insights 🗺️\\n\\nJust ask me about any trip or destination you're interested in!\",\n      },\n      pricing: {\n        keywords: [\n          \"price\",\n          \"cost\",\n          \"expensive\",\n          \"cheap\",\n          \"affordable\",\n          \"how much\",\n          \"budget\",\n        ],\n        response:\n          \"Great question about pricing! 💰 Tour prices vary based on:\\n• Season (peak vs off-season)\\n• Duration of the trip\\n• Type of accommodation\\n• Inclusions (meals, activities, etc.)\\n• Group size\\n\\nWould you like me to search for tours in a specific price range? Just tell me your budget!\",\n      },\n      booking: {\n        keywords: [\n          \"book\",\n          \"reserve\",\n          \"how to book\",\n          \"booking process\",\n          \"register\",\n          \"enrollment\",\n        ],\n        response:\n          \"Great! Here's how to book a tour with us:\\n1. Browse available tours 🔍\\n2. Check the itinerary and dates 📋\\n3. Review pricing and inclusions 💰\\n4. Contact our sales team for confirmation 📞\\n5. Complete the booking and payment 💳\\n\\nWould you like me to help you find a specific tour to book?\",\n      },\n      duration: {\n        keywords: [\n          \"duration\",\n          \"how long\",\n          \"days\",\n          \"nights\",\n          \"week\",\n          \"length of trip\",\n        ],\n        response:\n          \"Our tours range from short getaways to extended holidays! ⏰\\n• Weekend trips: 2-3 days\\n• Short trips: 4-5 days\\n• Standard tours: 6-8 days\\n• Extended tours: 10+ days\\n\\nTell me how many days you have available, and I'll find the perfect trip for you! 🎯\",\n      },\n      destination: {\n        keywords: [\"where\", \"destination\", \"place\", \"location\", \"visit\"],\n        response:\n          \"We offer amazing tours to various destinations! 🌟 Some popular ones include:\\n• Goa - Beaches & relaxation 🏖️\\n• Kerala - Backwaters & nature 🌴\\n• Rajasthan - Palaces & culture 🏛️\\n• Himalayas - Mountains & adventure 🏔️\\n• Delhi & North India - History & culture 🕌\\n\\nWhich destination interests you? I can show you available tours!\",\n      },\n      accommodation: {\n        keywords: [\n          \"hotel\",\n          \"accommodation\",\n          \"stay\",\n          \"where to stay\",\n          \"lodging\",\n          \"resort\",\n          \"facility\",\n        ],\n        response:\n          \"Our tours include comfortable accommodations! 🏨 We offer:\\n• Budget hotels - Comfortable and affordable\\n• Mid-range hotels - Good comfort & amenities\\n• Premium hotels - Luxury & exclusive experience\\n• Resorts - All-inclusive experience\\n\\nWould you like me to find tours with a specific type of accommodation?\",\n      },\n      transport: {\n        keywords: [\n          \"transport\",\n          \"travel\",\n          \"how to reach\",\n          \"flight\",\n          \"train\",\n          \"bus\",\n          \"vehicle\",\n          \"car\",\n          \"drive\",\n        ],\n        response:\n          \"We take care of your transportation! 🚌 Our packages typically include:\\n• Coach/Bus transport 🚌\\n• Local transfers 🚗\\n• Optional flight arrangements ✈️\\n• Train bookings (on request) 🚂\\n\\nAll transport is included in the tour price for your convenience. Would you like to explore available tours?\",\n      },\n      activities: {\n        keywords: [\n          \"activity\",\n          \"activities\",\n          \"what to do\",\n          \"adventure\",\n          \"experience\",\n          \"sightseeing\",\n          \"things to do\",\n        ],\n        response:\n          \"Our tours include amazing activities! 🎉 Depending on the destination:\\n• Sightseeing & cultural tours 🏛️\\n• Beach & water sports 🏄‍♂️\\n• Mountain trekking & hiking 🥾\\n• Wildlife spotting 🦁\\n• Local experiences & shopping 🛍️\\n• Adventure activities 🪂\\n\\nWhich type of activity interests you? I'll find the perfect tour!\",\n      },\n      group: {\n        keywords: [\n          \"group\",\n          \"family\",\n          \"friends\",\n          \"couple\",\n          \"solo\",\n          \"how many people\",\n        ],\n        response:\n          \"Great question! 👥 Our tours work for:\\n• Solo travelers - Meet new people! 🚶‍♂️\\n• Couples - Perfect getaway 💑\\n• Small groups - Friends & family 👨‍👩‍👧‍👦\\n• Large groups - Corporate & events 🏢\\n\\nAll our tours are inclusive and welcoming. Tell me your group size, and I'll recommend perfect options!\",\n      },\n      dates: {\n        keywords: [\n          \"when\",\n          \"date\",\n          \"season\",\n          \"time\",\n          \"availability\",\n          \"departure date\",\n          \"start date\",\n        ],\n        response:\n          \"Perfect! Timing is important 📅 Tours are available:\\n• Year-round for most destinations\\n• Peak seasons: Oct-Mar (cooler weather)\\n• Off-season: Apr-Sep (budget-friendly)\\n• Special offers: Available throughout the year\\n\\nTell me your preferred dates or season, and I'll show you available tours!\",\n      },\n      payment: {\n        keywords: [\n          \"payment\",\n          \"pay\",\n          \"refund\",\n          \"cancellation\",\n          \"policy\",\n          \"emi\",\n          \"installment\",\n        ],\n        response:\n          \"About payment options: 💳\\n• Multiple payment modes accepted\\n• Flexible EMI options available\\n• Secure online payment gateway\\n• Cancellation policy: Refer our T&C\\n• Full refund/rescheduling policies\\n\\nContact our sales team for specific details or explore tours now!\",\n      },\n      visa: {\n        keywords: [\n          \"visa\",\n          \"passport\",\n          \"document\",\n          \"requirement\",\n          \"international\",\n        ],\n        response:\n          \"For international tours, you may need: 📖\\n• Valid passport\\n• Visa (if required for the country)\\n• Travel insurance (recommended)\\n• Copies of documents\\n\\nOur team can guide you through the documentation process. Which country are you planning to visit?\",\n      },\n      safety: {\n        keywords: [\"safe\", \"safety\", \"secure\", \"protection\"],\n        response:\n          \"Safety is our top priority! 🛡️\\n• Experienced guides on all tours\\n• Safe & reliable transportation\\n• 24/7 emergency support\\n• Travel insurance options\\n• Well-established partner hotels\\n\\nYou can travel with confidence with Waari! Would you like to book a tour?\",\n      },\n      review: {\n        keywords: [\"review\", \"rating\", \"feedback\", \"testimonial\", \"rating\"],\n        response:\n          \"Our customers love their experiences with us! ⭐ You can:\\n• Check reviews on our website\\n• See customer testimonials\\n• Ask about past tours\\n• Connect with our support team\\n\\nWould you like to explore tours that have great reviews? I can help!\",\n      },\n      contact: {\n        keywords: [\"contact\", \"phone\", \"email\", \"support\", \"call\", \"reach\"],\n        response:\n          \"You can reach us at: 📞\\n• Visit our website for contact details\\n• Call our sales team for instant support\\n• Email us for detailed inquiries\\n• Chat with us here (24/7 available)\\n\\nHow can I help you find the perfect tour right now?\",\n      },\n    };\n\n    // Check predefined responses\n    for (const [key, { keywords, response }] of Object.entries(responses)) {\n      if (keywords.some((kw) => lowerQuery.includes(kw))) {\n        return response;\n      }\n    }\n\n    // Smart fallback response based on question type\n    if (lowerQuery.includes(\"?\")) {\n      // It's a question\n      if (lowerQuery.includes(\"can\") || lowerQuery.includes(\"could\")) {\n        return \"Great question! 🤔 For specific details about what we can arrange, our team is here to help! Tell me more about what you're looking for, or ask about:\\n• Tours to specific destinations\\n• Custom trip planning\\n• Group arrangements\\n• Special packages\\n\\nWhat sounds interesting to you? 😊\";\n      }\n      if (lowerQuery.includes(\"why\") || lowerQuery.includes(\"what\")) {\n        return \"That's a thoughtful question! 💭 To give you the best answer, I'd like to know more. Are you asking about:\\n• Tour planning & preparation?\\n• Destination insights?\\n• Our services & offerings?\\n• Travel tips & advice?\\n\\nFeel free to ask, and I'll do my best to help! 🌟\";\n      }\n      return \"Interesting question! 🤔 While I'm specialized in helping with tour bookings and travel queries, our expert team can help with almost anything travel-related. \\n\\nWould you like to:\\n• Explore available tours?\\n• Get destination recommendations?\\n• Learn about booking options?\\n\\nLet me know how I can assist! 😊\";\n    }\n\n    // It's a statement or comment\n    return \"That sounds great! 🎉 I'd love to help you with a tour experience! \\n\\nWould you be interested in:\\n• Exploring popular destinations? 🌍\\n• Learning about tour packages? 🎁\\n• Getting personalized recommendations? ✨\\n• Checking availability & pricing? 💰\\n\\nWhat would you like to know? 😊\";\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"ai-assistant-overlay\" onClick={onClose}>\n      <div\n        className=\"ai-assistant-container\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"ai-assistant-header\">\n          <div className=\"ai-assistant-title\">\n            <div className=\"ai-icon\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M12 8V4m0 16v-4m8-8h-4m-8 0H4m11.313 11.313l2.828-2.828m-5.656 0l-2.828 2.828m0-5.656l2.828-2.828m-5.656 0l2.828 2.828\" />\n              </svg>\n            </div>\n            <div>\n              <h2>Waari AI</h2>\n              <span className=\"status-badge\">Ready to help</span>\n            </div>\n          </div>\n          <button className=\"ai-close-btn\" onClick={onClose} aria-label=\"Close\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n            >\n              <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n              <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* Messages Area */}\n        <div className=\"ai-messages-container\">\n          {messages.map((message) => (\n            <div key={message.id} className={`ai-message ${message.sender}`}>\n              <div className=\"ai-message-content\">\n                {message.sender === \"bot\" && (\n                  <div className=\"ai-avatar\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"currentColor\"\n                    >\n                      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 6.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z\" />\n                    </svg>\n                  </div>\n                )}\n                <div>\n                  <div className=\"ai-message-text\">{message.text}</div>\n                  {/* Show filter buttons if available */}\n                  {message.filters && message.filters.length > 0 && (\n                    <div className=\"ai-filters\">\n                      {message.filters.map((filter, index) => (\n                        <button\n                          key={index}\n                          className=\"ai-filter-btn\"\n                          onClick={() => handleSendMessage(null, filter)}\n                          disabled={isLoading}\n                        >\n                          {filter}\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                  {/* Show suggestions as clickable buttons */}\n                  {message.suggestions && message.suggestions.length > 0 && (\n                    <div className=\"ai-suggestions\">\n                      {message.suggestions.map((suggestion, index) => (\n                        <button\n                          key={index}\n                          className=\"ai-suggestion-btn\"\n                          onClick={() => handleSendMessage(null, suggestion)}\n                          disabled={isLoading}\n                        >\n                          💡 {suggestion}\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <span className=\"ai-message-time\">\n                {message.timestamp.toLocaleTimeString([], {\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                })}\n              </span>\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"ai-message bot\">\n              <div className=\"ai-message-content\">\n                <div className=\"ai-avatar\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"currentColor\"\n                  >\n                    <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.5-9c.83 0 1.5-.67 1.5-1.5S16.33 8 15.5 8 14 8.67 14 9.5s.67 1.5 1.5 1.5zm-7 0c.83 0 1.5-.67 1.5-1.5S9.33 8 8.5 8 7 8.67 7 9.5 7.67 11 8.5 11zm3.5 6.5c2.33 0 4.31-1.46 5.11-3.5H6.89c.8 2.04 2.78 3.5 5.11 3.5z\" />\n                  </svg>\n                </div>\n                <div className=\"ai-typing-indicator\">\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                </div>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Input Area */}\n        <form onSubmit={handleSendMessage} className=\"ai-input-form\">\n          <div className=\"ai-input-wrapper\">\n            <input\n              type=\"text\"\n              className=\"ai-input\"\n              placeholder=\"Type your message here...\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              disabled={isLoading}\n            />\n            <button\n              type=\"submit\"\n              className=\"ai-send-btn\"\n              disabled={isLoading || !inputValue.trim()}\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                fill=\"currentColor\"\n              >\n                <path d=\"M16.6915026,12.4744748 L3.50612381,13.2599618 C3.19218622,13.2599618 3.03521743,13.4170592 3.03521743,13.5741566 L1.15159189,20.0151496 C0.8376543,20.8006365 0.99,21.89 1.77946707,22.52 C2.41,22.99 3.50612381,23.1 4.13399899,22.8429026 L21.714504,14.0454487 C22.6563168,13.5741566 23.1272231,12.6315722 22.9702544,11.6889879 L4.13399899,1.16346272 C3.34915502,0.9 2.40734225,0.9 1.77946707,1.4429026 C0.994623095,2.0591707 0.837654326,3.0143979 1.15159189,3.97788954 L3.03521743,10.4188826 C3.03521743,10.5759799 3.34915502,10.7330773 3.50612381,10.7330773 L16.6915026,11.5185642 C16.6915026,11.5185642 17.1624089,11.5185642 17.1624089,12.0493666 C17.1624089,12.5801689 16.6915026,12.4744748 16.6915026,12.4744748 Z\" />\n              </svg>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default AIAssistant;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"d:\\passion\\waari-live\\frontend\\src\\services\\WaariAIService.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":68,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":69},{"ruleId":"no-unused-vars","severity":2,"message":"'reduxState' is defined but never used.","line":460,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":460,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'reduxState' is defined but never used.","line":549,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":549,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'reduxState' is defined but never used.","line":626,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":626,"endColumn":52},{"ruleId":"no-unused-vars","severity":2,"message":"'reduxState' is defined but never used.","line":706,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":706,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'reduxState' is defined but never used.","line":784,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":784,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'reduxState' is defined but never used.","line":864,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":864,"endColumn":54},{"ruleId":"no-unused-vars","severity":2,"message":"'reduxState' is defined but never used.","line":944,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":944,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'reduxState' is defined but never used.","line":1022,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":1022,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'reduxState' is defined but never used.","line":1037,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":1037,"endColumn":54},{"ruleId":"no-unused-vars","severity":2,"message":"'reduxState' is defined but never used.","line":1089,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":1089,"endColumn":52}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Waari AI Service\n * Main service that connects all AI modules and handles AI logic\n */\n\nimport { searchTrips, generateTripResponse } from \"./TripService\";\nimport ERPContextManager from \"./ERPContextManager\";\nimport { post } from \"./apiServices\";\n\nclass WaariAIService {\n  /**\n   * Main method to process user query with ERP context\n   */\n  static async processQueryWithContext(userQuery, reduxState, conversationHistory = []) {\n    try {\n      const context = ERPContextManager.generateContextSummary(reduxState);\n      const module = ERPContextManager.detectModule();\n\n      console.log(\"🤖 Processing query in context:\", {\n        module,\n        query: userQuery,\n      });\n\n      const moduleResponse = await this.routeQueryToModule(\n        userQuery,\n        module,\n        reduxState,\n        context\n      );\n\n      const historyPayload = this.prepareConversationHistory(conversationHistory);\n      let backendResponse = null;\n\n      try {\n        const apiResponse = await post(\"/ai/assistant\", {\n          message: userQuery,\n          history: historyPayload,\n          context,\n          module,\n        });\n        backendResponse = apiResponse?.data?.data ?? apiResponse?.data ?? null;\n      } catch (apiError) {\n        console.error(\"❌ AI backend error:\", apiError);\n      }\n\n      let response = this.mergeResponses(backendResponse, moduleResponse);\n\n      response = this.applyRolePersona(response, reduxState);\n\n      return {\n        ...response,\n        context: module,\n        timestamp: new Date().toISOString(),\n      };\n    } catch (error) {\n      console.error(\"❌ Error processing query:\", error);\n      return {\n        success: false,\n        text: \"I encountered an error processing your request. Please try again. 😅\",\n        suggestions: [\"Show me available tours\", \"How can you help me?\"],\n      };\n    }\n  }\n\n  /**\n   * Route query to appropriate module handler\n   */\n  static async routeQueryToModule(query, module, reduxState, context) {\n    const lowerQuery = query.toLowerCase();\n\n    if (module === \"GENERAL\") {\n      const tourKeywords = [\"tour\", \"trip\", \"package\", \"itinerary\", \"travel\"];\n      const bookingKeywords = [\"booking\", \"bookings\", \"reservation\", \"confirm\", \"seat\"];\n      const enquiryKeywords = [\"enquiry\", \"inquiry\", \"lead\", \"prospect\", \"follow-up\"];\n\n      if (tourKeywords.some((word) => lowerQuery.includes(word))) {\n        module = \"TOURS\";\n      } else if (bookingKeywords.some((word) => lowerQuery.includes(word))) {\n        module = \"BOOKINGS\";\n      } else if (enquiryKeywords.some((word) => lowerQuery.includes(word))) {\n        module = \"PRESALES\";\n      }\n    }\n\n    switch (module) {\n      case \"PRESALES\":\n        return this.handlePresalesQuery(query, reduxState);\n\n      case \"BOOKINGS\":\n        return this.handleBookingsQuery(query, reduxState);\n\n      case \"BILLING\":\n        return this.handleBillingQuery(query, reduxState);\n\n      case \"PAYMENTS\":\n        return this.handlePaymentsQuery(query, reduxState);\n\n      case \"GUESTS\":\n        return this.handleGuestsQuery(query, reduxState);\n\n      case \"REPORTING\":\n        return this.handleReportingQuery(query, reduxState);\n\n      case \"TEAM\":\n        return this.handleTeamQuery(query, reduxState);\n\n      case \"TOURS\":\n        return this.handleToursQuery(query, reduxState);\n\n      case \"DASHBOARD\":\n        return this.handleDashboardQuery(query, reduxState);\n\n      default:\n        return this.handleGeneralQuery(query, reduxState);\n    }\n  }\n\n  static applyRolePersona(response, reduxState) {\n    if (!response || typeof response !== \"object\") {\n      return response;\n    }\n\n    const personaResponse = { ...response };\n    const roleId = this.resolveRoleId(reduxState);\n\n    if (typeof roleId !== \"number\") {\n      return personaResponse;\n    }\n\n    const personas = {\n      1: {\n        message:\n          \"Since you have admin access, I can highlight system metrics, role management, and company-wide insights.\",\n        suggestions: [\"Show me system metrics\", \"Review pending approvals\"],\n      },\n      2: {\n        message:\n          \"Your sales role lets you focus on enquiries, conversions, and customer follow-ups. I can surface leads that need attention.\",\n        suggestions: [\"Show pending enquiries\", \"Suggest follow-up actions\"],\n      },\n      3: {\n        message:\n          \"With an operations role, I can help track tour logistics, guest documents, and departure readiness.\",\n        suggestions: [\"Show upcoming departures\", \"Check guest document status\"],\n      },\n    };\n\n    const persona = personas[roleId];\n\n    if (!persona) {\n      return personaResponse;\n    }\n\n    const baseText = personaResponse.text ?? \"\";\n    const addition = persona.message;\n    personaResponse.text = baseText\n      ? `${baseText}\\n\\n${addition}`\n      : addition;\n\n    const existingSuggestions = Array.isArray(personaResponse.suggestions)\n      ? personaResponse.suggestions\n      : [];\n    const personaSuggestions = Array.isArray(persona.suggestions)\n      ? persona.suggestions.filter((suggestion) => !existingSuggestions.includes(suggestion))\n      : [];\n\n    if (personaSuggestions.length > 0) {\n      personaResponse.suggestions = [...existingSuggestions, ...personaSuggestions];\n    }\n\n    personaResponse.persona = roleId;\n\n    return personaResponse;\n  }\n\n  static resolveRoleId(reduxState) {\n    const candidates = [\n      reduxState?.auth?.roleId,\n      reduxState?.auth?.role?.id,\n      reduxState?.auth?.role?.roleId,\n      reduxState?.auth?.user?.roleId,\n      reduxState?.auth?.user?.role_id,\n      reduxState?.auth?.user?.role?.id,\n      reduxState?.auth?.user?.role?.roleId,\n      reduxState?.auth?.profile?.roleId,\n      reduxState?.auth?.profile?.role?.id,\n      reduxState?.user?.roleId,\n      reduxState?.user?.role?.id,\n    ];\n\n    for (const candidate of candidates) {\n      const normalized = this.normalizeRoleCandidate(candidate);\n      if (typeof normalized === \"number\") {\n        return normalized;\n      }\n    }\n\n    return null;\n  }\n\n  static normalizeRoleCandidate(candidate) {\n    if (candidate === null || candidate === undefined) {\n      return null;\n    }\n\n    if (typeof candidate === \"number\" && Number.isFinite(candidate)) {\n      return candidate;\n    }\n\n    if (typeof candidate === \"string\") {\n      const trimmed = candidate.trim();\n      if (!trimmed) {\n        return null;\n      }\n\n      try {\n        const parsed = JSON.parse(trimmed);\n        return this.normalizeRoleCandidate(parsed);\n      } catch (error) {\n        const numeric = Number(trimmed);\n        return Number.isNaN(numeric) ? null : numeric;\n      }\n    }\n\n    if (typeof candidate === \"object\") {\n      const nestedCandidates = [\n        candidate.roleId,\n        candidate.role_id,\n        candidate.id,\n        candidate.value,\n        candidate.role?.id,\n        candidate.role?.roleId,\n        candidate.role?.value,\n      ];\n\n      for (const nested of nestedCandidates) {\n        const normalized = this.normalizeRoleCandidate(nested);\n        if (typeof normalized === \"number\") {\n          return normalized;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  static mergeResponses(backendResponse, moduleResponse) {\n    const moduleData =\n      moduleResponse && typeof moduleResponse === \"object\"\n        ? { ...moduleResponse }\n        : {};\n\n    const result = {\n      success: moduleData.success ?? true,\n      ...moduleData,\n    };\n\n    const backendData = this.extractResponseFields(backendResponse);\n\n    if (backendData.text) {\n      result.text = backendData.text;\n    } else if (typeof result.text !== \"string\") {\n      result.text = \"\";\n    }\n\n    const moduleSuggestions = Array.isArray(moduleData.suggestions)\n      ? moduleData.suggestions.slice()\n      : [];\n    const combinedSuggestions = [...moduleSuggestions];\n\n    backendData.suggestions.forEach((suggestion) => {\n      if (!combinedSuggestions.includes(suggestion)) {\n        combinedSuggestions.push(suggestion);\n      }\n    });\n\n    result.suggestions = combinedSuggestions;\n\n    if (!result.action && backendData.action) {\n      result.action = backendData.action;\n    }\n\n    if (typeof result.actionable !== \"boolean\" && typeof backendData.actionable === \"boolean\") {\n      result.actionable = backendData.actionable;\n    }\n\n    if (!result.filters && backendData.filters) {\n      result.filters = backendData.filters;\n    }\n\n    if (typeof backendData.success === \"boolean\") {\n      result.success = backendData.success;\n    }\n\n    return result;\n  }\n\n  static extractResponseFields(payload) {\n    const base = {\n      text: \"\",\n      suggestions: [],\n      action: undefined,\n      actionable: undefined,\n      filters: undefined,\n      success: undefined,\n    };\n\n    if (!payload) {\n      return base;\n    }\n\n    if (typeof payload === \"string\") {\n      return {\n        ...base,\n        text: payload.trim(),\n      };\n    }\n\n    if (typeof payload !== \"object\") {\n      return base;\n    }\n\n    const candidates = [];\n\n    if (payload.data) {\n      candidates.push(this.extractResponseFields(payload.data));\n    }\n\n    if (payload.reply) {\n      const normalizedReply = this.extractResponseFields(payload.reply);\n      const extraSuggestions = Array.isArray(payload.suggestions)\n        ? payload.suggestions\n            .filter((item) => typeof item === \"string\" && item.trim())\n            .map((item) => item.trim())\n        : [];\n      extraSuggestions.forEach((suggestion) => {\n        if (!normalizedReply.suggestions.includes(suggestion)) {\n          normalizedReply.suggestions.push(suggestion);\n        }\n      });\n      if (typeof payload.success === \"boolean\") {\n        normalizedReply.success = payload.success;\n      }\n      candidates.push(normalizedReply);\n    }\n\n    if (!payload.data && !payload.reply) {\n      const suggestions = Array.isArray(payload.suggestions)\n        ? payload.suggestions\n            .filter((item) => typeof item === \"string\" && item.trim())\n            .map((item) => item.trim())\n        : [];\n\n      candidates.push({\n        text:\n          typeof payload.text === \"string\"\n            ? payload.text.trim()\n            : typeof payload.message === \"string\"\n            ? payload.message.trim()\n            : \"\",\n        suggestions,\n        action:\n          typeof payload.action === \"string\"\n            ? payload.action\n            : typeof payload.suggestedAction === \"string\"\n            ? payload.suggestedAction\n            : undefined,\n        actionable:\n          typeof payload.actionable === \"boolean\"\n            ? payload.actionable\n            : undefined,\n        filters: payload.filters,\n        success:\n          typeof payload.success === \"boolean\" ? payload.success : undefined,\n      });\n    }\n\n    if (!candidates.length) {\n      return base;\n    }\n\n    const merged = candidates.reduce(\n      (acc, item) => {\n        if (item.text) {\n          acc.text = item.text;\n        }\n        if (Array.isArray(item.suggestions)) {\n          item.suggestions.forEach((suggestion) => {\n            if (!acc.suggestions.includes(suggestion)) {\n              acc.suggestions.push(suggestion);\n            }\n          });\n        }\n        if (item.action) {\n          acc.action = item.action;\n        }\n        if (typeof item.actionable === \"boolean\") {\n          acc.actionable = item.actionable;\n        }\n        if (item.filters && !acc.filters) {\n          acc.filters = item.filters;\n        }\n        if (typeof item.success === \"boolean\") {\n          acc.success = item.success;\n        }\n        return acc;\n      },\n      { ...base }\n    );\n\n    if (!merged.actionable && merged.action) {\n      merged.actionable = true;\n    }\n\n    return merged;\n  }\n\n  static prepareConversationHistory(history) {\n    if (!Array.isArray(history)) {\n      return [];\n    }\n\n    const sanitized = history\n      .filter((entry) => entry && typeof entry.text === \"string\" && entry.text.trim())\n      .map((entry) => ({\n        sender: entry.sender === \"bot\" ? \"assistant\" : \"user\",\n        text: entry.text.trim(),\n      }));\n\n    const pairs = [];\n    let current = null;\n\n    sanitized.forEach((entry) => {\n      if (entry.sender === \"user\") {\n        if (current && (current.user || current.assistant)) {\n          pairs.push(current);\n        }\n        current = { user: entry.text };\n      } else {\n        if (current && current.user) {\n          current.assistant = entry.text;\n          pairs.push(current);\n          current = null;\n        } else {\n          pairs.push({ assistant: entry.text });\n        }\n      }\n    });\n\n    if (current && (current.user || current.assistant)) {\n      pairs.push(current);\n    }\n\n    return pairs.slice(-6);\n  }\n\n  /**\n   * PRESALES Module Handler\n   */\n  static async handlePresalesQuery(query, reduxState) {\n    const lowerQuery = query.toLowerCase();\n\n    // Check what the user wants to do\n    if (/search|find|show|look for|display|list|available/i.test(lowerQuery)) {\n      // Search for tours\n      const searchResults = await searchTrips(query);\n      const response = generateTripResponse(searchResults, query);\n\n      return {\n        ...response,\n        action: \"SEARCH_TOURS\",\n        actionable: true,\n        suggestedAction: \"Show me these tours in detail\",\n      };\n    }\n\n    if (/create|new|add|register|enquiry|inquiry/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `📝 I can help you create a new enquiry! Here's what I need:\n1. **Customer Name**: Who is this enquiry from?\n2. **Tour Preference**: Which tour are they interested in?\n3. **Duration**: How many days?\n4. **Budget**: What's their budget range?\n5. **Group Size**: How many people?\n6. **Travel Dates**: When do they want to travel?\n\nYou can fill this information step by step, and I'll guide you through the enquiry creation process.`,\n        action: \"CREATE_ENQUIRY\",\n        actionable: true,\n        suggestedAction: \"Help me create a new enquiry\",\n      };\n    }\n\n    if (/assign|allocate|transfer|delegate|assign to/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `👤 I can help you assign enquiries to team members. To do this, I need:\n1. **Which enquiry** do you want to assign?\n2. **To which team member** should it be assigned?\n3. **Priority level** (High/Medium/Low)?\n4. **Follow-up deadline**?\n\nAssigning enquiries strategically helps ensure timely follow-ups and better conversion rates.`,\n        action: \"ASSIGN_ENQUIRY\",\n        actionable: true,\n      };\n    }\n\n    if (/follow.?up|remind|status|track/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `📞 Enquiry follow-up is crucial for conversions! I can help you:\n- Get a list of overdue follow-ups\n- Schedule follow-up reminders\n- Track enquiry status\n- Suggest next best action for each enquiry\n- Generate follow-up reports\n\nWould you like to see pending follow-ups or create a follow-up plan?`,\n        action: \"FOLLOWUP_ENQUIRY\",\n        actionable: true,\n      };\n    }\n\n    // Default presales response\n    return {\n      success: true,\n      text: `Hi! 👋 In the Presales module, I can help you:\n- **Search tours** matching customer requirements\n- **Create new enquiries** from customer inquiries\n- **Assign enquiries** to team members\n- **Track follow-ups** and conversions\n- **View enquiry status** and history\n\nWhat would you like to do?`,\n      suggestions: [\n        \"Search for tours\",\n        \"Create new enquiry\",\n        \"Show pending follow-ups\",\n        \"Assign enquiries\",\n      ],\n    };\n  }\n\n  /**\n   * BOOKINGS Module Handler\n   */\n  static async handleBookingsQuery(query, reduxState) {\n    const lowerQuery = query.toLowerCase();\n\n    if (/view|show|details|information|status/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `📋 I can help you view booking details. Do you want to:\n- View **specific booking** details\n- Check **guest assignments**\n- See **accommodation arrangements**\n- Track **transportation details**\n- View **payment status**\n- Check **add-on services**\n\nWhich booking would you like to check?`,\n        action: \"VIEW_BOOKING\",\n        actionable: true,\n      };\n    }\n\n    if (/guest|member|participant|traveler/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `👥 I can help you manage guests in bookings. I can:\n- **Add new guests** to a booking\n- **Update guest information**\n- **Upload guest documents** (passport, visa, etc.)\n- **Assign guest roles** (lead, companion, etc.)\n- **View guest list** for a booking\n- **Export guest details**\n\nWhich booking's guests would you like to manage?`,\n        action: \"MANAGE_GUESTS\",\n        actionable: true,\n      };\n    }\n\n    if (/cancel|refund|delete|remove/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `⚠️ Booking cancellation is a sensitive operation. Before I help, please confirm:\n1. **Which booking** needs to be cancelled?\n2. **Reason** for cancellation?\n3. **Refund policy** to apply?\n4. **Customer communication** - have they been informed?\n\nCancellations can impact revenue and customer relationships. Let's handle this carefully!`,\n        action: \"CANCEL_BOOKING\",\n        actionable: true,\n      };\n    }\n\n    // Default bookings response\n    return {\n      success: true,\n      text: `📅 In the Bookings module, I can help you:\n- **View booking** details and status\n- **Manage guests** and participants\n- **Arrange accommodations** and transportation\n- **Track payments** and adjustments\n- **Add services** and upgrades\n- **Handle cancellations** if needed\n- **Generate booking reports**\n\nWhat would you like to do?`,\n      suggestions: [\n        \"View booking details\",\n        \"Manage guests\",\n        \"Check payment status\",\n        \"Update arrangements\",\n      ],\n    };\n  }\n\n  /**\n   * BILLING Module Handler\n   */\n  static async handleBillingQuery(query, reduxState) {\n    const lowerQuery = query.toLowerCase();\n\n    if (/invoice|bill|charge|amount|cost|price/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `💰 I can help you with invoicing! I can:\n- **Generate invoices** for bookings\n- **Calculate costs** based on tour details\n- **Apply discounts** and adjustments\n- **View invoice status**\n- **Track payment status**\n- **Generate billing reports**\n- **Manage recurring charges**\n\nWhich booking would you like to invoice?`,\n        action: \"GENERATE_INVOICE\",\n        actionable: true,\n      };\n    }\n\n    if (/discount|adjustment|refund|credit|debit/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `🏷️ I can help you manage adjustments and discounts. I can:\n- **Apply discounts** (percentage or fixed)\n- **Process refunds** (full or partial)\n- **Add credits** or adjustments\n- **Apply coupon codes**\n- **Track adjustment history**\n- **Validate discount rules**\n\nTell me which booking needs adjustment and why?`,\n        action: \"APPLY_ADJUSTMENT\",\n        actionable: true,\n      };\n    }\n\n    if (/report|summary|analysis|trend|profit/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `📊 I can help you generate billing reports:\n- **Revenue summary** by period\n- **Outstanding payments** list\n- **Collected payments** analysis\n- **Discount analysis**\n- **Profit margins** by tour\n- **Customer payment behavior**\n\nWhat period would you like to analyze?`,\n        action: \"GENERATE_REPORT\",\n        actionable: true,\n      };\n    }\n\n    // Default billing response\n    return {\n      success: true,\n      text: `💳 In the Billing module, I can help you:\n- **Generate invoices** for bookings\n- **Calculate costs** accurately\n- **Apply discounts** and adjustments\n- **Process refunds**\n- **Track payment status**\n- **Generate financial reports**\n- **Manage billing records**\n\nWhat do you need help with?`,\n      suggestions: [\n        \"Generate invoice\",\n        \"Apply discount\",\n        \"View payment status\",\n        \"Generate report\",\n      ],\n    };\n  }\n\n  /**\n   * PAYMENTS Module Handler\n   */\n  static async handlePaymentsQuery(query, reduxState) {\n    const lowerQuery = query.toLowerCase();\n\n    if (/process|pay|payment|collect/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `💳 I can help you process payments! I can:\n- **Collect payment** from customer\n- **Generate payment link**\n- **Track payment status**\n- **Process partial payments**\n- **Manage payment plans**\n- **Record manual payments**\n- **Send payment reminders**\n\nWhich booking's payment would you like to process?`,\n        action: \"PROCESS_PAYMENT\",\n        actionable: true,\n      };\n    }\n\n    if (/receipt|voucher|proof/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `🧾 I can help with receipts and vouchers:\n- **Generate receipt** for payment\n- **Create payment voucher**\n- **Email receipt** to customer\n- **Track receipt history**\n- **Reissue receipt** if needed\n\nWhich payment would you like receipt for?`,\n        action: \"GENERATE_RECEIPT\",\n        actionable: true,\n      };\n    }\n\n    if (/fail|error|issue|problem|retry/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `⚠️ I can help troubleshoot payment issues:\n- **Retry failed payment**\n- **Check payment gateway status**\n- **Investigate transaction**\n- **Suggest alternative payment method**\n- **Escalate to support** if needed\n\nTell me which payment is having issues?`,\n        action: \"RESOLVE_PAYMENT_ISSUE\",\n        actionable: true,\n      };\n    }\n\n    // Default payments response\n    return {\n      success: true,\n      text: `💰 In the Payments module, I can help you:\n- **Process payments** securely\n- **Generate receipts** and vouchers\n- **Track payment history**\n- **Manage payment methods**\n- **Handle failed payments**\n- **Process refunds**\n- **Generate payment reports**\n\nWhat do you need?`,\n      suggestions: [\n        \"Process payment\",\n        \"Generate receipt\",\n        \"Check payment status\",\n        \"Retry failed payment\",\n      ],\n    };\n  }\n\n  /**\n   * GUESTS Module Handler\n   */\n  static async handleGuestsQuery(query, reduxState) {\n    const lowerQuery = query.toLowerCase();\n\n    if (/add|new|register|create/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `➕ I can help you add new guests! I need:\n- **Full Name**\n- **Date of Birth**\n- **Contact Information** (phone, email)\n- **Address**\n- **Document Details** (passport, ID, etc.)\n- **Relationship** to group (lead/companion)\n- **Special Requirements** (dietary, medical, etc.)\n\nStart with the guest's full name?`,\n        action: \"ADD_GUEST\",\n        actionable: true,\n      };\n    }\n\n    if (/document|passport|visa|id|upload/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `📄 I can help manage guest documents:\n- **Upload passport** copy\n- **Add visa** details\n- **Upload ID** proof\n- **Track document** status\n- **Set reminders** for expiring documents\n- **Generate document** checklist\n\nWhich guest's documents would you like to manage?`,\n        action: \"MANAGE_DOCUMENTS\",\n        actionable: true,\n      };\n    }\n\n    if (/list|view|all|export|report/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `👥 I can help you view and manage guest lists:\n- **View all guests** for a booking\n- **Export guest list**\n- **Generate guest report**\n- **Filter guests** by criteria\n- **Search guests** by name/ID\n- **Print guest manifest**\n\nWhich booking's guests would you like to see?`,\n        action: \"VIEW_GUESTS\",\n        actionable: true,\n      };\n    }\n\n    // Default guests response\n    return {\n      success: true,\n      text: `👤 In the Guests module, I can help you:\n- **Add new guests** to bookings\n- **Update guest information**\n- **Manage guest documents**\n- **Track special requirements**\n- **View guest lists**\n- **Export guest data**\n- **Generate guest reports**\n\nWhat would you like to do?`,\n      suggestions: [\n        \"Add new guest\",\n        \"Manage documents\",\n        \"View guest list\",\n        \"Export data\",\n      ],\n    };\n  }\n\n  /**\n   * REPORTING Module Handler\n   */\n  static async handleReportingQuery(query, reduxState) {\n    const lowerQuery = query.toLowerCase();\n\n    if (/sales|revenue|booking|tour/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `📈 I can help generate sales reports:\n- **Monthly sales** summary\n- **Sales by tour type**\n- **Sales by team member**\n- **Booking trends**\n- **Revenue analysis**\n- **Period-over-period** comparison\n- **Sales forecast**\n\nWhich time period would you like to analyze?`,\n        action: \"SALES_REPORT\",\n        actionable: true,\n      };\n    }\n\n    if (/commission|payment|earning|bonus/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `💵 I can help with commission reports:\n- **Commission calculation** by agent\n- **Commission summary** by period\n- **Payment tracking**\n- **Commission breakup** by tour\n- **Pending commissions**\n- **Payment history**\n\nWhich agent or period would you like to check?`,\n        action: \"COMMISSION_REPORT\",\n        actionable: true,\n      };\n    }\n\n    if (/profit|margin|cost|expense/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `💰 I can help analyze profitability:\n- **Profit by tour**\n- **Profit margin** analysis\n- **Cost breakdown**\n- **Expenses** tracking\n- **Profitability trends**\n- **Best performing** tours\n\nWhat would you like to analyze?`,\n        action: \"PROFIT_REPORT\",\n        actionable: true,\n      };\n    }\n\n    // Default reporting response\n    return {\n      success: true,\n      text: `📊 In the Reporting module, I can help you:\n- **Generate sales reports**\n- **Analyze commission** and earnings\n- **View profit analysis**\n- **Track key metrics**\n- **Compare periods**\n- **Export reports**\n- **Create insights**\n\nWhat report would you like?`,\n      suggestions: [\n        \"Generate sales report\",\n        \"Show commissions\",\n        \"Analyze profits\",\n        \"Export data\",\n      ],\n    };\n  }\n\n  /**\n   * TEAM Module Handler\n   */\n  static async handleTeamQuery(query, reduxState) {\n    const lowerQuery = query.toLowerCase();\n\n    if (/user|add|create|new|register/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `👤 I can help you add new team members:\n- **User details** (name, email, phone)\n- **Assign role** (Admin, Manager, Agent, etc.)\n- **Set permissions**\n- **Assign office/team**\n- **Send invitation**\n- **Track onboarding**\n\nWhat's the new team member's name?`,\n        action: \"ADD_USER\",\n        actionable: true,\n      };\n    }\n\n    if (/role|permission|access|authorize/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `🔐 I can help manage roles and permissions:\n- **Create new role**\n- **Assign roles** to users\n- **Set permissions**\n- **Manage access levels**\n- **Review permissions** for a user\n- **Audit permission** changes\n\nWhich user's permissions would you like to manage?`,\n        action: \"MANAGE_ROLES\",\n        actionable: true,\n      };\n    }\n\n    if (/performance|activity|report|assignment/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `📊 I can help track team performance:\n- **User activity** report\n- **Assignment tracking**\n- **Performance metrics**\n- **Follow-up completion** rate\n- **Booking conversion** rate\n- **Team comparison**\n\nWhich team member would you like to analyze?`,\n        action: \"TEAM_REPORT\",\n        actionable: true,\n      };\n    }\n\n    // Default team response\n    return {\n      success: true,\n      text: `👥 In the Team module, I can help you:\n- **Add new users**\n- **Manage roles** and permissions\n- **Track team activity**\n- **View performance** metrics\n- **Manage assignments**\n- **Generate team reports**\n\nWhat would you like to do?`,\n      suggestions: [\n        \"Add new user\",\n        \"Manage permissions\",\n        \"View performance\",\n        \"Generate report\",\n      ],\n    };\n  }\n\n  /**\n   * TOURS Module Handler\n   */\n  static async handleToursQuery(query, reduxState) {\n    // Delegate to TripService for tour queries\n    const searchResults = await searchTrips(query);\n    const response = generateTripResponse(searchResults, query);\n\n    return {\n      ...response,\n      action: \"SEARCH_TOURS\",\n      actionable: true,\n    };\n  }\n\n  /**\n   * DASHBOARD Module Handler\n   */\n  static async handleDashboardQuery(query, reduxState) {\n    const lowerQuery = query.toLowerCase();\n\n    if (/quick|search|find|tour/i.test(lowerQuery)) {\n      const searchResults = await searchTrips(query);\n      return generateTripResponse(searchResults, query);\n    }\n\n    if (/status|booking|enquiry|overview/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `📊 From the Dashboard, I can give you quick status updates:\n- **Total bookings** count\n- **Pending enquiries**\n- **Revenue** summary\n- **Team activity**\n- **Upcoming tours**\n- **System alerts**\n\nWhat would you like to check?`,\n        suggestions: [\n          \"Show me total bookings\",\n          \"What's pending?\",\n          \"Revenue summary\",\n          \"Team activity\",\n        ],\n      };\n    }\n\n    // Default dashboard response\n    return {\n      success: true,\n      text: `🏠 Hi! I'm Waari AI, your ERP assistant. From the dashboard, I can help you:\n- **Quick tour search**\n- **Booking status** overview\n- **Navigate modules** (Presales, Bookings, Billing, etc.)\n- **Get quick insights**\n- **Answer questions** about your ERP\n\nWhat would you like to do?`,\n      suggestions: [\n        \"Search for tours\",\n        \"Show bookings\",\n        \"Navigate to sales\",\n        \"Show me everything\",\n      ],\n    };\n  }\n\n  /**\n   * GENERAL Query Handler\n   */\n  static async handleGeneralQuery(query, reduxState) {\n    const lowerQuery = query.toLowerCase();\n\n    if (/help|what can you do|capabilities|features|assist/i.test(lowerQuery)) {\n      return {\n        success: true,\n        text: `Hi! 👋 I'm Waari AI, your complete ERP assistant. I can help you with:\n\n**Tour Management** 🌍\n- Search tours by destination, date, budget\n- Get tour recommendations\n- Check availability\n\n**Presales** 📞\n- Create enquiries\n- Manage follow-ups\n- Convert enquiries to bookings\n\n**Bookings** 📅\n- Manage confirmed bookings\n- Assign guests\n- Handle arrangements\n\n**Billing & Payments** 💰\n- Generate invoices\n- Process payments\n- Track financial records\n\n**Guest Management** 👥\n- Add and manage guests\n- Handle documents\n- Track requirements\n\n**Reports** 📊\n- Sales and revenue analysis\n- Commission tracking\n- Performance metrics\n\n**Team Management** 👤\n- Manage users and roles\n- Set permissions\n- Track performance\n\nI'm context-aware, so I adapt my help based on which module you're using. Just ask me anything! 🚀`,\n        suggestions: [\n          \"How do I search tours?\",\n          \"Create a new enquiry\",\n          \"Show bookings\",\n          \"Generate report\",\n        ],\n      };\n    }\n\n    // Default general response\n    return {\n      success: true,\n      text: `👋 I'm Waari AI! I can help you navigate and manage your entire ERP system. You can ask me about:\n- **Tours** - Search and recommendations\n- **Bookings** - Management and tracking\n- **Billing** - Invoices and payments\n- **Guests** - Information and documents\n- **Reports** - Analytics and insights\n- **Team** - User and role management\n\nWhat would you like help with?`,\n      suggestions: [\n        \"Search for tours\",\n        \"Create enquiry\",\n        \"Show bookings\",\n        \"Generate report\",\n      ],\n    };\n  }\n\n  /**\n   * Get action-specific suggestions\n   */\n  static getActionSuggestions(action) {\n    const suggestions = {\n      SEARCH_TOURS: [\n        \"Show me more results\",\n        \"Filter by price\",\n        \"Filter by duration\",\n        \"Compare tours\",\n      ],\n      CREATE_ENQUIRY: [\n        \"Create another enquiry\",\n        \"Assign to team\",\n        \"Set follow-up reminder\",\n      ],\n      ASSIGN_ENQUIRY: [\n        \"Bulk assign enquiries\",\n        \"Set follow-up schedule\",\n        \"View assigned enquiries\",\n      ],\n      GENERATE_INVOICE: [\n        \"Send invoice to customer\",\n        \"Track payment\",\n        \"Apply discount\",\n      ],\n      PROCESS_PAYMENT: [\n        \"Generate receipt\",\n        \"Send reminder\",\n        \"View payment history\",\n      ],\n      ADD_GUEST: [\n        \"Add another guest\",\n        \"Upload documents\",\n        \"Set special requirements\",\n      ],\n      SALES_REPORT: [\"Export as PDF\", \"Compare periods\", \"Email report\"],\n    };\n\n    return suggestions[action] || [];\n  }\n}\n\nexport default WaariAIService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]